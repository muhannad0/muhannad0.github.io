<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws on Muhannad.0</title><link>https://muhannad0.github.io/tags/aws/</link><description>Recent content in aws on muhannad0.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Vitae theme for Hugo</copyright><lastBuildDate>Tue, 27 Oct 2020 06:07:04 +0500</lastBuildDate><atom:link href="https://muhannad0.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Building Cloud Infra Using Terraform - Part 2 (RDS MySQL Module)</title><link>https://muhannad0.github.io/post/building-cloud-infra-using-terraform-part2-rds-mysql-module/</link><pubDate>Tue, 27 Oct 2020 06:07:04 +0500</pubDate><guid>https://muhannad0.github.io/post/building-cloud-infra-using-terraform-part2-rds-mysql-module/</guid><description>
This post will explain how to create a Terraform custom module that can deploy a RDS MySQL instance. It will be used as the database service for the example architecture from the previous post.</description></item><item><title>Building Cloud Infra Using Terraform - Part 1 (Concept of Modules)</title><link>https://muhannad0.github.io/post/building-cloud-infra-using-terraform-part1-modules-concept/</link><pubDate>Thu, 08 Oct 2020 06:50:59 +0500</pubDate><guid>https://muhannad0.github.io/post/building-cloud-infra-using-terraform-part1-modules-concept/</guid><description>
In this post, I explain how we can make use of Terraform modules to create reusable and flexible configurations to build cloud infrastructure. This is more of an overview of the concept and usage of modules. There will definitely be more with details of the actual implementation.</description></item><item><title>AWS CloudFormation and Ansible: Provision and Configure EC2 Instances</title><link>https://muhannad0.github.io/post/cloudformation-and-ansible-provision-and-configure/</link><pubDate>Fri, 14 Aug 2020 03:56:37 +0500</pubDate><guid>https://muhannad0.github.io/post/cloudformation-and-ansible-provision-and-configure/</guid><description>
An explainer of how I used Ansible and CloudFormation to deploy and configure EC2 instances on AWS.</description></item><item><title>Using Moto to mock test AWS services: A DynamoDB Example</title><link>https://muhannad0.github.io/post/using-moto-to-mock-test-aws-a-dynamodb-example/</link><pubDate>Sun, 19 Jul 2020 00:54:48 +0500</pubDate><guid>https://muhannad0.github.io/post/using-moto-to-mock-test-aws-a-dynamodb-example/</guid><description>
Recently, I had to write some tests for functions that called AWS services in Python. I found the 'moto' library which provides mocks for a lot of the AWS services for your tests. This is a basic example of using moto to test DynamoDB operations.</description></item><item><title>Building a Serverless Telegram Bot on AWS</title><link>https://muhannad0.github.io/post/serverless-telegram-bot-on-aws/</link><pubDate>Sun, 21 Jun 2020 00:34:19 +0500</pubDate><guid>https://muhannad0.github.io/post/serverless-telegram-bot-on-aws/</guid><description>
Iâ€™ve always wanted to try out to build a small chat bot. So, I decided to take a serverless approach to it.</description></item><item><title>Completing the Cloud Resume Challenge</title><link>https://muhannad0.github.io/post/completing-the-cloudresumechallenge/</link><pubDate>Mon, 15 Jun 2020 00:25:13 +0500</pubDate><guid>https://muhannad0.github.io/post/completing-the-cloudresumechallenge/</guid><description>
Mission Accomplished! I'd like to share how I was able to tick off all the tasks on the #CloudResumeChallenge.</description></item><item><title>Phase 4: Using Infra as Code on AWS</title><link>https://muhannad0.github.io/post/phase4-using-infra-as-code-cloudresumechallenge/</link><pubDate>Fri, 12 Jun 2020 14:31:06 +0500</pubDate><guid>https://muhannad0.github.io/post/phase4-using-infra-as-code-cloudresumechallenge/</guid><description>
Phase 4 of #CloudResumeChallenge where I try to deploy to AWS using infra-as-code. During the initial work to develop the resume website, I used the console to set things up. But knowing how to define them in a configuration file and use one or two commands to deploy all of it automatically, that saves a lot of time.</description></item><item><title>Phase 3: Building a Site Visit Counter with AWS API Gateway / Lambda / DynamoDB</title><link>https://muhannad0.github.io/post/phase3-build-site-visit-counter-apigateway-lambda-dynamodb-cloudresumechallenge/</link><pubDate>Fri, 05 Jun 2020 14:46:58 +0500</pubDate><guid>https://muhannad0.github.io/post/phase3-build-site-visit-counter-apigateway-lambda-dynamodb-cloudresumechallenge/</guid><description>
Phase 3 of #CloudResumeChallenge where I develop a small application to handle a visit counter. This one was a huge learning curve for me and I share how I attempted to complete the task.</description></item><item><title>Phase 2: Host a website on AWS S3</title><link>https://muhannad0.github.io/post/phase2-host-website-on-aws-s3-cloudresumechallenge/</link><pubDate>Sat, 09 May 2020 01:02:18 +0500</pubDate><guid>https://muhannad0.github.io/post/phase2-host-website-on-aws-s3-cloudresumechallenge/</guid><description>
Phase 2 of #CloudResumeChallenge where I work to host a website on AWS.</description></item></channel></rss>